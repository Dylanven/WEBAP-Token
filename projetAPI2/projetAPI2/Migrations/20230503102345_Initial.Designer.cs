// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projetAPI2.Models;

#nullable disable

namespace projetAPI2.Migrations
{
    [DbContext(typeof(PrototypeContext))]
    [Migration("20230503102345_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("EventCategory", b =>
                {
                    b.Property<int>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.HasKey("IdEvent", "IdCategory")
                        .HasName("PK__event_ca__C0774B6D32845BC0");

                    b.HasIndex("IdCategory");

                    b.ToTable("event_category", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("projetAPI2.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("catName")
                        .IsFixedLength();

                    b.HasKey("IdCategory")
                        .HasName("PK__category__79D361B6EE739486");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.CategoryFavorite", b =>
                {
                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdCategory", "IdUser")
                        .HasName("PK__category__4AA21D2E0C9C56A3");

                    b.ToTable("category_favorite", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Connection", b =>
                {
                    b.Property<int>("IdConnection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idConnection");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConnection"));

                    b.Property<DateTime>("ConDate")
                        .HasColumnType("date")
                        .HasColumnName("conDate");

                    b.Property<string>("ConToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("conToken")
                        .IsFixedLength();

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdConnection")
                        .HasName("PK__connecti__3066470962D4C623");

                    b.HasIndex("IdUser");

                    b.ToTable("connection", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCountry");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCountry"));

                    b.Property<string>("CouCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("couCode")
                        .IsFixedLength();

                    b.Property<string>("CouName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("char(80)")
                        .HasColumnName("couName")
                        .IsFixedLength();

                    b.HasKey("IdCountry")
                        .HasName("PK__country__8536480926E28CA1");

                    b.HasIndex(new[] { "CouCode" }, "UQ__country__BBF9E9CE02C203D9")
                        .IsUnique();

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Emoji", b =>
                {
                    b.Property<int>("IdEmojis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEmojis");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmojis"));

                    b.Property<string>("EmoImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("emoImg");

                    b.Property<string>("EmoShortCut")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("emoShortCut")
                        .IsFixedLength();

                    b.HasKey("IdEmojis")
                        .HasName("PK__emoji__D0839414A356F9AC");

                    b.ToTable("emoji", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvent"));

                    b.Property<string>("EveDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("eveDescription");

                    b.Property<DateTime>("EveEndDate")
                        .HasColumnType("date")
                        .HasColumnName("eveEndDate");

                    b.Property<short?>("EveMaxParticipant")
                        .HasColumnType("smallint")
                        .HasColumnName("eveMaxParticipant");

                    b.Property<string>("EvePublic")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("evePublic")
                        .IsFixedLength();

                    b.Property<DateTime>("EveStartDate")
                        .HasColumnType("date")
                        .HasColumnName("eveStartDate");

                    b.Property<string>("EveTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("eveTitle");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int")
                        .HasColumnName("idCountry");

                    b.Property<int>("IdStatesEvent")
                        .HasColumnType("int")
                        .HasColumnName("idStatesEvent");

                    b.HasKey("IdEvent")
                        .HasName("PK__event__B7EA7D76A32487F4");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdStatesEvent");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.EventRole", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRole");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"));

                    b.Property<string>("RolName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("rolName")
                        .IsFixedLength();

                    b.HasKey("IdRole")
                        .HasName("PK__event_ro__E5045C54D9A6D2E3");

                    b.HasIndex(new[] { "RolName" }, "UQ__event_ro__F39DC1F6EF9DB536")
                        .IsUnique();

                    b.ToTable("event_role", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Forum", b =>
                {
                    b.Property<int>("IdForum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idForum");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdForum"));

                    b.Property<int>("ForVue")
                        .HasColumnType("int")
                        .HasColumnName("forVue");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.HasKey("IdForum")
                        .HasName("PK__forum__74618C427307D0B8");

                    b.HasIndex("IdEvent");

                    b.ToTable("forum", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Invitation", b =>
                {
                    b.Property<int>("IdInvitation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idInvitation");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInvitation"));

                    b.Property<int>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<string>("InvCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("invCode")
                        .IsFixedLength();

                    b.Property<int?>("InvIdUser")
                        .HasColumnType("int")
                        .HasColumnName("Inv_idUser");

                    b.HasKey("IdInvitation")
                        .HasName("PK__invitati__CE65ED710AC12B89");

                    b.HasIndex("IdEvent");

                    b.HasIndex("IdUser");

                    b.HasIndex("InvIdUser");

                    b.ToTable("invitation", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Notification", b =>
                {
                    b.Property<int>("IdNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idNotification");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNotification"));

                    b.Property<string>("NotMessage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("char(250)")
                        .HasColumnName("notMessage")
                        .IsFixedLength();

                    b.Property<string>("NotTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("notTitle")
                        .IsFixedLength();

                    b.HasKey("IdNotification")
                        .HasName("PK__notifica__22C0232168C58046");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Place", b =>
                {
                    b.Property<int>("IdPlace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPlace");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlace"));

                    b.Property<int>("IdCountry")
                        .HasColumnType("int")
                        .HasColumnName("idCountry");

                    b.Property<string>("PlaAddress")
                        .IsRequired()
                        .HasMaxLength(38)
                        .IsUnicode(false)
                        .HasColumnType("char(38)")
                        .HasColumnName("plaAddress")
                        .IsFixedLength();

                    b.HasKey("IdPlace")
                        .HasName("PK__place__39B84B90309B4559");

                    b.HasIndex("IdCountry");

                    b.ToTable("place", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Post", b =>
                {
                    b.Property<int>("IdPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPost");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPost"));

                    b.Property<int>("IdForum")
                        .HasColumnType("int")
                        .HasColumnName("idForum");

                    b.Property<int>("MulitAnswer")
                        .HasColumnType("int")
                        .HasColumnName("mulitAnswer");

                    b.Property<DateTime>("PosDate")
                        .HasColumnType("date")
                        .HasColumnName("posDate");

                    b.Property<string>("PosMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("posMessage");

                    b.Property<string>("PosTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("posTitle");

                    b.HasKey("IdPost")
                        .HasName("PK__post__BE0F4FD63232CEE2");

                    b.HasIndex("IdForum");

                    b.ToTable("post", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Question", b =>
                {
                    b.Property<int>("IdQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idQuestion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdQuestion"));

                    b.Property<int>("IdSurvey")
                        .HasColumnType("int")
                        .HasColumnName("idSurvey");

                    b.Property<string>("QueMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("queMessage")
                        .IsFixedLength();

                    b.HasKey("IdQuestion")
                        .HasName("PK__question__1196F46574C34B34");

                    b.HasIndex("IdSurvey");

                    b.ToTable("question", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.StatesEvent", b =>
                {
                    b.Property<int>("IdStatesEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idStatesEvent");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatesEvent"));

                    b.Property<string>("StaEvName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("staEvName")
                        .IsFixedLength();

                    b.HasKey("IdStatesEvent")
                        .HasName("PK__statesEv__CE0B4F9B6782221C");

                    b.HasIndex(new[] { "StaEvName" }, "UQ__statesEv__5DAF5BE614EC3414")
                        .IsUnique();

                    b.ToTable("statesEvent", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.StatesTask", b =>
                {
                    b.Property<int>("IdStatesTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idStatesTask");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatesTask"));

                    b.Property<string>("StaTaName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("staTaName")
                        .IsFixedLength();

                    b.HasKey("IdStatesTask")
                        .HasName("PK__statesTa__5A163727362EB978");

                    b.HasIndex(new[] { "StaTaName" }, "UQ__statesTa__6CFBD88188269D95")
                        .IsUnique();

                    b.ToTable("statesTask", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Survey", b =>
                {
                    b.Property<int>("IdSurvey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSurvey");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSurvey"));

                    b.Property<int>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.Property<string>("SurMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("surMessage")
                        .IsFixedLength();

                    b.Property<byte[]>("SurMultipleAnswer")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("binary(1)")
                        .HasColumnName("surMultipleAnswer")
                        .IsFixedLength();

                    b.Property<string>("SurTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surTitle");

                    b.HasKey("IdSurvey")
                        .HasName("PK__survey__C10C8BC5470581E4");

                    b.ToTable("survey", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.Task", b =>
                {
                    b.Property<int>("IdTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTask");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTask"));

                    b.Property<int>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.Property<int>("IdStatesTask")
                        .HasColumnType("int")
                        .HasColumnName("idStatesTask");

                    b.Property<string>("TasDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tasDescription");

                    b.Property<DateTime>("TasEndDate")
                        .HasColumnType("date")
                        .HasColumnName("tasEndDate");

                    b.Property<DateTime>("TasStartDate")
                        .HasColumnType("date")
                        .HasColumnName("tasStartDate");

                    b.Property<string>("TasTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tasTitle");

                    b.HasKey("IdTask")
                        .HasName("PK__task__C3E0F4DA42A3D86B");

                    b.ToTable("task", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserAccount", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<int>("IdCountry")
                        .HasColumnType("int")
                        .HasColumnName("idCountry");

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("idRole");

                    b.Property<string>("UseAvatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("useAvatar");

                    b.Property<DateTime>("UseBirthDate")
                        .HasColumnType("date")
                        .HasColumnName("useBirthDate");

                    b.Property<string>("UseEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("useEmail");

                    b.Property<string>("UseFirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("useFirstName")
                        .IsFixedLength();

                    b.Property<byte[]>("UseIsActive")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("binary(1)")
                        .HasColumnName("useIsActive")
                        .IsFixedLength();

                    b.Property<string>("UseLastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("useLastName")
                        .IsFixedLength();

                    b.Property<string>("UsePassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("usePassword")
                        .IsFixedLength();

                    b.Property<string>("UsePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("usePhone");

                    b.HasKey("IdUser")
                        .HasName("PK__user_acc__3717C982A18D5D4B");

                    b.HasIndex(new[] { "UseEmail" }, "UQ__user_acc__2C4DF4B5817917D8")
                        .IsUnique();

                    b.ToTable("user_account", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserConnection", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdConnection")
                        .HasColumnType("int")
                        .HasColumnName("idConnection");

                    b.HasKey("IdUser", "IdConnection")
                        .HasName("PK__user_con__B411ADF28B5DA3C2");

                    b.ToTable("user_connection", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserEvent", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("idRole");

                    b.HasKey("IdUser", "IdEvent", "IdRole")
                        .HasName("PK__user_eve__198C6A0978A3B9A5");

                    b.ToTable("user_event", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserFavorite", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.HasKey("IdUser", "IdEvent")
                        .HasName("PK__user_fav__4C696E553F232DF2");

                    b.ToTable("user_favorite", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserInvitation", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdInvitation")
                        .HasColumnType("int")
                        .HasColumnName("idInvitation");

                    b.HasKey("IdUser", "IdInvitation")
                        .HasName("PK__user_inv__3BF1975534D9287E");

                    b.ToTable("user_invitation", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserNotification", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdNotification")
                        .HasColumnType("int")
                        .HasColumnName("idNotification");

                    b.HasKey("IdUser", "IdNotification")
                        .HasName("PK__user_not__353BCBB02E221D16");

                    b.ToTable("user_notification", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserPost", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdPost")
                        .HasColumnType("int")
                        .HasColumnName("idPost");

                    b.HasKey("IdUser", "IdPost")
                        .HasName("PK__user_pos__4CF73D7F22EAE078");

                    b.ToTable("user_post", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserQuestion", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int")
                        .HasColumnName("idQuestion");

                    b.HasKey("IdUser", "IdQuestion")
                        .HasName("PK__user_que__760EA6C4D8BBC28A");

                    b.ToTable("user_question", (string)null);
                });

            modelBuilder.Entity("projetAPI2.Models.UserTask", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdTask")
                        .HasColumnType("int")
                        .HasColumnName("idTask");

                    b.HasKey("IdUser", "IdTask")
                        .HasName("PK__user_tas__8B29C6CF5C255E8D");

                    b.ToTable("user_task", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("projetAPI2.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetAPI2.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventCategory", b =>
                {
                    b.HasOne("projetAPI2.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK__event_cat__idCat__151B244E");

                    b.HasOne("projetAPI2.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("IdEvent")
                        .IsRequired()
                        .HasConstraintName("FK__event_cat__idEve__160F4887");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("projetAPI2.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("projetAPI2.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("projetAPI2.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetUserToken", b =>
                {
                    b.HasOne("projetAPI2.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("projetAPI2.Models.Connection", b =>
                {
                    b.HasOne("projetAPI2.Models.UserAccount", "IdUserNavigation")
                        .WithMany("Connections")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK__connectio__idUse__114A936A");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("projetAPI2.Models.Event", b =>
                {
                    b.HasOne("projetAPI2.Models.Country", "IdCountryNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdCountry")
                        .IsRequired()
                        .HasConstraintName("FK__event__idCountry__14270015");

                    b.HasOne("projetAPI2.Models.StatesEvent", "IdStatesEventNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdStatesEvent")
                        .IsRequired()
                        .HasConstraintName("FK__event__idStatesE__1332DBDC");

                    b.Navigation("IdCountryNavigation");

                    b.Navigation("IdStatesEventNavigation");
                });

            modelBuilder.Entity("projetAPI2.Models.Forum", b =>
                {
                    b.HasOne("projetAPI2.Models.Event", "IdEventNavigation")
                        .WithMany("Forums")
                        .HasForeignKey("IdEvent")
                        .IsRequired()
                        .HasConstraintName("FK__forum__idEvent__17F790F9");

                    b.Navigation("IdEventNavigation");
                });

            modelBuilder.Entity("projetAPI2.Models.Invitation", b =>
                {
                    b.HasOne("projetAPI2.Models.Event", "IdEventNavigation")
                        .WithMany("Invitations")
                        .HasForeignKey("IdEvent")
                        .IsRequired()
                        .HasConstraintName("FK__invitatio__idEve__1AD3FDA4");

                    b.HasOne("projetAPI2.Models.UserAccount", "IdUserNavigation")
                        .WithMany("InvitationIdUserNavigations")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK__invitatio__idUse__18EBB532");

                    b.HasOne("projetAPI2.Models.UserAccount", "InvIdUserNavigation")
                        .WithMany("InvitationInvIdUserNavigations")
                        .HasForeignKey("InvIdUser")
                        .HasConstraintName("FK__invitatio__Inv_i__19DFD96B");

                    b.Navigation("IdEventNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("InvIdUserNavigation");
                });

            modelBuilder.Entity("projetAPI2.Models.Place", b =>
                {
                    b.HasOne("projetAPI2.Models.Country", "IdCountryNavigation")
                        .WithMany("Places")
                        .HasForeignKey("IdCountry")
                        .IsRequired()
                        .HasConstraintName("FK__place__idCountry__1BC821DD");

                    b.Navigation("IdCountryNavigation");
                });

            modelBuilder.Entity("projetAPI2.Models.Post", b =>
                {
                    b.HasOne("projetAPI2.Models.Forum", "IdForumNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("IdForum")
                        .IsRequired()
                        .HasConstraintName("FK__post__idForum__1CBC4616");

                    b.Navigation("IdForumNavigation");
                });

            modelBuilder.Entity("projetAPI2.Models.Question", b =>
                {
                    b.HasOne("projetAPI2.Models.Survey", "IdSurveyNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("IdSurvey")
                        .IsRequired()
                        .HasConstraintName("FK__question__idSurv__1DB06A4F");

                    b.Navigation("IdSurveyNavigation");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("projetAPI2.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("projetAPI2.Models.Country", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("projetAPI2.Models.Event", b =>
                {
                    b.Navigation("Forums");

                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("projetAPI2.Models.Forum", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("projetAPI2.Models.StatesEvent", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("projetAPI2.Models.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("projetAPI2.Models.UserAccount", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("InvitationIdUserNavigations");

                    b.Navigation("InvitationInvIdUserNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
